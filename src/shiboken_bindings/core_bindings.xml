<?xml version="1.0"?>
<!--
-->
<typesystem package="h2core">
    <load-typesystem name="core_common.xml" generate="no" />
    <load-typesystem name="typesystem_core_common.xml" generate="no"/>
  

    <!-- <smart-pointer-type name="std::shared_ptr" type="shared" getter="get"/> -->

    <!-- <namespace-type name="std">
        <smart-pointer-type name="shared_ptr" type="shared" getter="get"
        instantiations="H2Core::ADSR "/>
    </namespace-type> -->
    <!-- <custom-type name="std::shared_ptr" /> -->
    <custom-type name="std::unique_ptr" />
<!--
    <container-type name="std::list" type="list">
        <include file-name="list" location="global" />
        <conversion-rule>
            <native-to-target>
            PyObject* %out = PyList_New((int) %in.size());
            %INTYPE::const_iterator it = %in.begin();
            for (int idx = 0; it != %in.end(); ++it, ++idx) {
                %INTYPE_0 cppItem(*it);
                PyList_SET_ITEM(%out, idx, %CONVERTTOPYTHON[%INTYPE_0](cppItem));
            }
            return %out;
            </native-to-target>
            <target-to-native>
                <add-conversion type="PySequence">
                Shiboken::AutoDecRef seq(PySequence_Fast(%in, 0));
                for (int i = 0; i &lt; PySequence_Fast_GET_SIZE(seq.object()); i++) {
                    PyObject* pyItem = PySequence_Fast_GET_ITEM(seq.object(), i);
                    %OUTTYPE_0 cppItem = %CONVERTTOCPP[%OUTTYPE_0](pyItem);
                    %out.push_back(cppItem);
                }
                </add-conversion>
            </target-to-native>
        </conversion-rule>
    </container-type>


    <container-type name="std::vector" type="list">
        <include file-name="list" location="global" />
        <conversion-rule>
            <native-to-target>
            PyObject* %out = PyList_New((int) %in.size());
            %INTYPE::const_iterator it = %in.begin();
            for (int idx = 0; it != %in.end(); ++it, ++idx) {
                %INTYPE_0 cppItem(*it);
                PyList_SET_ITEM(%out, idx, %CONVERTTOPYTHON[%INTYPE_0](cppItem));
            }
            return %out;
            </native-to-target>
            <target-to-native>
                <add-conversion type="PySequence">
                Shiboken::AutoDecRef seq(PySequence_Fast(%in, 0));
                for (int i = 0; i &lt; PySequence_Fast_GET_SIZE(seq.object()); i++) {
                    PyObject* pyItem = PySequence_Fast_GET_ITEM(seq.object(), i);
                    %OUTTYPE_0 cppItem = %CONVERTTOCPP[%OUTTYPE_0](pyItem);
                    %out.push_back(cppItem);
                }
                </add-conversion>
            </target-to-native>
        </conversion-rule>
    </container-type> -->

    <namespace-type name="std" generate="no">
        <smart-pointer-type name="shared_ptr" type="shared" getter="get"/>
        <!-- <custom-type name="shared_ptr"/> -->
        <!-- <primitive-type name="shared_ptr"/> -->
    </namespace-type>

    <rejection class="H2Core::Hydrogen" field-name="m_nInstrumentLookupTable"/>
    <rejection class="H2Core::Preferences" function-name="getDataDirectory"/>
    <namespace-type name="H2Core" package="h2core">
        <object-type name="Object"></object-type>
        <object-type name="EnvelopePoint"></object-type>
        <object-type name="Sample">

            <modify-function signature="get_data_l()const">
                <modify-argument index="return">
                    <conversion-rule class="target">
                        // conversion-rule: class=target, get_data_l() -> float * -> PySequence
                        // $0        : %0
                        // $CPPSELF  : %CPPSELF
                        // $CPPTYPE  : %CPPTYPE 
                        // $PYARG_0  : %PYARG_0
                        // $PYSELF   : %PYSELF
                        // $RETURN_TYPE: %RETURN_TYPE
                        %PYARG_0 = PyList_New(%CPPSELF->get_frames());
                        for (int i = 0; i &lt; %CPPSELF->get_frames(); ++i) {
                            PyObject *fl = PyFloat_FromDouble(%0[i]);
                            PyList_SET_ITEM(%PYARG_0, i, fl);
                        }
                    </conversion-rule>
                </modify-argument>
            </modify-function>

            <modify-function signature="get_data_r()const">
                <modify-argument index="return">
                    <conversion-rule class="target">
                        // conversion-rule: class=target, get_data_r() -> float * -> PySequence
                        // $0        : %0
                        // $CPPSELF  : %CPPSELF
                        // $CPPTYPE  : %CPPTYPE 
                        // $PYARG_0  : %PYARG_0
                        // $PYSELF   : %PYSELF
                        // $RETURN_TYPE: %RETURN_TYPE
                        %PYARG_0 = PyList_New(%CPPSELF->get_frames());
                        for (int i = 0; i &lt; %CPPSELF->get_frames(); ++i) {
                            PyObject *fl = PyFloat_FromDouble(%0[i]);
                            PyList_SET_ITEM(%PYARG_0, i, fl);
                        }
                    </conversion-rule>
                </modify-argument>
            </modify-function>

            <value-type name="Loops">
                <enum-type name="LoopMode" />
            </value-type>
            <value-type name="Rubberband"></value-type>
        </object-type>

        <object-type name="Instrument">
            <enum-type name="SampleSelectionAlgo"/>
        </object-type>
        <smart-pointer-type name="::std::shared_ptr&lt;Instrument>" type="shared" getter="get"/>
        <object-type name="InstrumentComponent">
        </object-type>

        <object-type name="InstrumentLayer">
        </object-type>

        <object-type name="InstrumentList">
        </object-type>

        <object-type name="Drumkit">
        </object-type>

        <object-type name="Filesystem">
            <modify-function signature="Filesystem()" remove="all" />
            <enum-type name="file_perms"/>
            <enum-type name="Lookup"/>
        </object-type>

        <object-type name="Song">
            <enum-type name="SongMode"/>
            <enum-type name="ActionMode"/>
        </object-type>

        <object-type name="SongReader">
        </object-type>

        <object-type name="ADSR"></object-type>

        <object-type name="Logger">
            <enum-type name="log_levels"/>>
        </object-type>

        <object-type name="Hydrogen">
            <enum-type name="ErrorMessages"/>
            <enum-type name="GUIState"/>
        </object-type>

        <object-type name="Preferences">
            <enum-type name="UI_LAYOUT_TYPES"/>
            <enum-type name="UI_SCALING_POLICY"/>
            <enum-type name="JackTrackOutputMode"/>
            <enum-type name="JackBBTSyncMethod"/>

        </object-type>

    </namespace-type>
</typesystem>
