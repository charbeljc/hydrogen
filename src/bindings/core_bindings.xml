<?xml version="1.0"?>
<!--
-->
<typesystem package="h2core">
    <primitive-type name="float"/>
    <primitive-type name="nullptr_t"/>

    <primitive-type name="std::string"/>
    <primitive-type name="QString"/>
    <primitive-type name="const char*"/>
    <primitive-type name="nullptr"/>
    <custom-type name="str"/>
    <custom-type name="PyBytes"/>
    <custom-type name="PyDate"/>
    <custom-type name="PyObject"/>
    <custom-type name="PyUnicode"/>

    <primitive-type name="bool"/>
    <primitive-type name="double"/>
    <primitive-type name="real"/>
    <primitive-type name="int"/>
    <primitive-type name="short"/>
    <primitive-type name="unsigned short"/>
    <primitive-type name="ushort"/>
    <primitive-type name="unsigned int" />
    <primitive-type name="signed int" />
    <primitive-type name="char"/>
    <primitive-type name="unsigned char"/>
    <primitive-type name="long"/>
    <primitive-type name="unsigned long"/>
    <primitive-type name="long long"/>
    <primitive-type name="unsigned long long"/>
    <primitive-type name="std::string"/>
    <primitive-type name="ObjectType::Identifier"/>
    <primitive-type name="float *"/>
    <primitive-type name="std::default_delete"/>
    <custom-type name="std::unique_ptr" />
    <smart-pointer-type name="std::shared_ptr" type="shared" getter="get" instanciations="H2Core::Sample"/>
    <!-- Current limitation: shared pointer python objects can only be instantiated from API usage,
         like when they are returned as a result of a method, or passed as arguments. It is not
         possible to explicitly instantiate a new shared pointer in python e.g. o = SharedPtr_Foo()
         won't work.
    -->

    <container-type name="std::vector" type="list">
        <include file-name="list" location="global"/>
        <conversion-rule>
            <native-to-target>
            PyObject* %out = PyList_New((int) %in.size());
            %INTYPE::const_iterator it = %in.begin();
            for (int idx = 0; it != %in.end(); ++it, ++idx) {
                %INTYPE_0 cppItem(*it);
                PyList_SET_ITEM(%out, idx, %CONVERTTOPYTHON[%INTYPE_0](cppItem));
            }
            return %out;
            </native-to-target>
            <target-to-native>
                <add-conversion type="PySequence">
                Shiboken::AutoDecRef seq(PySequence_Fast(%in, 0));
                for (int i = 0; i &lt; PySequence_Fast_GET_SIZE(seq.object()); i++) {
                    PyObject* pyItem = PySequence_Fast_GET_ITEM(seq.object(), i);
                    %OUTTYPE_0 cppItem = %CONVERTTOCPP[%OUTTYPE_0](pyItem);
                    %out.push_back(cppItem);
                }
                </add-conversion>
            </target-to-native>
        </conversion-rule>
    </container-type>
    <!-- <object-type name="QDebug"/> -->

    <namespace-type name="H2Core" package="h2core">
        <object-type name="Object">
            <!-- <modify-function signature="Object(const char*)">
            	<modify-argument index="1">
	    	        <replace-type modified-type="PyBytes" />
	    	        <conversion-rule class="native">
	    		        const char* %out = reinterpret_cast&lt;const char*>(PyBytes_AS_STRING(%PYARG_1));
	    	        </conversion-rule>
	            </modify-argument>
            </modify-function> -->
        </object-type> 
        <object-type name="Logger"/>
        <object-type name="EnvelopePoint">
        </object-type>
        <object-type name="Sample">
            <modify-function signature="Sample(QString, int, int, float*, float*)">
                <modify-argument index="2">
                    <remove-argument/>
                </modify-argument>

                <modify-argument index="3">
                    <remove-argument/>
                </modify-argument>

                <modify-argument index="4">
                    <remove-argument/>
                    <replace-type modified-type="int"/>
                    <conversion-rule class="native">
                    float* %in = 0;
                    </conversion-rule>
                </modify-argument>
                <modify-argument index="5">
                    <remove-argument/>
                    <conversion-rule class="native">
                    float* %in = 0;
                    </conversion-rule>
                </modify-argument>
            </modify-function>
            <value-type name="Loops">
                <enum-type name="LoopMode"/>
            </value-type>
            <value-type name="Rubberband">
            </value-type>
        </object-type>

    </namespace-type>
</typesystem>
