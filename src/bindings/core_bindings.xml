<?xml version="1.0"?>
<!--
-->
<typesystem package="h2core">
    <load-typesystem name="core_common.xml" generate="no" />
    <load-typesystem name="typesystem_core_common.xml" generate="no"/>
    <!-- <custom-type name="str" />
    <custom-type name="PyBytes" />
    <custom-type name="PyByteArray" />
    <custom-type name="PyCallable" />
    <custom-type name="PyObject" />
    <custom-type name="PySequence" />
    <custom-type name="PyTypeObject" />
    <custom-type name="PyUnicode" />
    <add-function signature="qDebug(const char*)">
        <inject-code file="../glue/qtcore.cpp" snippet="use-stream-for-format-security" />
    </add-function>
    <add-function signature="qCritical(const char*)">
        <inject-code file="../glue/qtcore.cpp" snippet="use-stream-for-format-security" />
    </add-function>
    <add-function signature="qFatal(const char*)">
        <inject-code file="../glue/qtcore.cpp" snippet="qfatal" />
    </add-function>
    <add-function signature="qWarning(const char*)">
        <inject-code file="../glue/qtcore.cpp" snippet="use-stream-for-format-security" />
    </add-function>
    <rejection class="QMetaObject" function-name="activate" />
    <rejection class="QMetaObject" function-name="metacall" />
    <rejection class="QMetaObject" function-name="static_metacall" />
    <rejection class="QMetaObject" function-name="addGuard" />
    <rejection class="QMetaObject" function-name="changeGuard" />
    <rejection class="QMetaObject" function-name="removeGuard" />

    <rejection class="QAlgorithmsPrivate" />
    <rejection class="QJsonPrivate" />
    <rejection class="QTextStreamFunctions" />
    <rejection class="QtGlobalStatic" />
    <rejection class="QtMetaTypePrivate" />
    <rejection class="QtPrivate" />
    <rejection class="QtSharedPointer" />
    <rejection class="QtStringBuilder" />
    <rejection class="std" />

    <primitive-type name="qint8" />
    <primitive-type name="qint16" />
    <primitive-type name="qint32" />
    <primitive-type name="quint8" />
    <primitive-type name="quint16" />
    <primitive-type name="quint32" />
    <primitive-type name="quint64" />
    <primitive-type name="double" />
    <primitive-type name="qreal" />
    <primitive-type name="float" />
    <primitive-type name="qint64" />
    <primitive-type name="unsigned long long" />
    <primitive-type name="long long" />
    <primitive-type name="qlonglong" target-lang-api-name="PyLong" />
    <primitive-type name="qulonglong" target-lang-api-name="PyLong" />
    <primitive-type name="short" />
    <primitive-type name="signed short" />
    <primitive-type name="signed short int" />
    <primitive-type name="ushort" target-lang-api-name="PyInt" />
    <primitive-type name="unsigned short int" />
    <primitive-type name="unsigned short" />
    <primitive-type name="char" />
    <primitive-type name="signed char" />
    <primitive-type name="uchar" />
    <primitive-type name="unsigned char" />
    <primitive-type name="int" />
    <primitive-type name="signed int" />
    <primitive-type name="uint" />
    <primitive-type name="ulong" />
    <primitive-type name="unsigned int" />
    <primitive-type name="signed long" />
    <primitive-type name="signed long int" />
    <primitive-type name="long" />
    <primitive-type name="unsigned long int" />
    <primitive-type name="unsigned long" />
    <primitive-type name="bool" /> -->

    <!-- <smart-pointer-type name="std::shared_ptr" type="shared" getter="get"/> -->

    <!-- <primitive-type name="QString" target-lang-api-name="PyUnicode">
        <include file-name="QString" location="global" />
        <conversion-rule>
            <native-to-target file="../glue/qtcore.cpp" snippet="return-pyunicode" />
            <target-to-native>
                <add-conversion type="PyUnicode" file="../glue/qtcore.cpp" snippet="conversion-pyunicode" />
                <add-conversion type="Py_None" file="../glue/qtcore.cpp" snippet="conversion-pynone" />
            </target-to-native>
        </conversion-rule>
    </primitive-type> -->
    <!-- <namespace-type name="std">
        <smart-pointer-type name="shared_ptr" type="shared" getter="get"
        instantiations="H2Core::ADSR "/>
    </namespace-type> -->
    <!-- <custom-type name="std::shared_ptr" /> -->
    <custom-type name="std::unique_ptr" />

    <container-type name="std::list" type="list">
        <include file-name="list" location="global" />
        <conversion-rule>
            <native-to-target>
            PyObject* %out = PyList_New((int) %in.size());
            %INTYPE::const_iterator it = %in.begin();
            for (int idx = 0; it != %in.end(); ++it, ++idx) {
                %INTYPE_0 cppItem(*it);
                PyList_SET_ITEM(%out, idx, %CONVERTTOPYTHON[%INTYPE_0](cppItem));
            }
            return %out;
            </native-to-target>
            <target-to-native>
                <add-conversion type="PySequence">
                Shiboken::AutoDecRef seq(PySequence_Fast(%in, 0));
                for (int i = 0; i &lt; PySequence_Fast_GET_SIZE(seq.object()); i++) {
                    PyObject* pyItem = PySequence_Fast_GET_ITEM(seq.object(), i);
                    %OUTTYPE_0 cppItem = %CONVERTTOCPP[%OUTTYPE_0](pyItem);
                    %out.push_back(cppItem);
                }
                </add-conversion>
            </target-to-native>
        </conversion-rule>
    </container-type>


    <container-type name="std::vector" type="list">
        <include file-name="list" location="global" />
        <conversion-rule>
            <native-to-target>
            PyObject* %out = PyList_New((int) %in.size());
            %INTYPE::const_iterator it = %in.begin();
            for (int idx = 0; it != %in.end(); ++it, ++idx) {
                %INTYPE_0 cppItem(*it);
                PyList_SET_ITEM(%out, idx, %CONVERTTOPYTHON[%INTYPE_0](cppItem));
            }
            return %out;
            </native-to-target>
            <target-to-native>
                <add-conversion type="PySequence">
                Shiboken::AutoDecRef seq(PySequence_Fast(%in, 0));
                for (int i = 0; i &lt; PySequence_Fast_GET_SIZE(seq.object()); i++) {
                    PyObject* pyItem = PySequence_Fast_GET_ITEM(seq.object(), i);
                    %OUTTYPE_0 cppItem = %CONVERTTOCPP[%OUTTYPE_0](pyItem);
                    %out.push_back(cppItem);
                }
                </add-conversion>
            </target-to-native>
        </conversion-rule>
    </container-type>

    <rejection class="H2Core::Hydrogen" field-name="m_nInstrumentLookupTable"/>
    <rejection class="H2Core::Preferences" function-name="getDataDirectory"/>
    <namespace-type name="H2Core" package="h2core">
        <object-type name="Object"></object-type>
        <!-- <object-type name="Object"> -->
        <!-- <modify-function signature="Object(const char*)">
            	<modify-argument index="1">
	    	        <replace-type modified-type="PyBytes" />
	    	        <conversion-rule class="native">
	    		        const char* %out = reinterpret_cast&lt;const char*>(PyBytes_AS_STRING(%PYARG_1));
	    	        </conversion-rule>
	            </modify-argument>
            </modify-function> -->
        <!-- </object-type>  -->

        <!-- <object-type name="Logger"/> -->
        <object-type name="EnvelopePoint"></object-type>
        <object-type name="Sample">
            <modify-function signature="Sample(QString, int, int, float*, float*)" remove="all" />

            <!-- <modify-function signature="Sample(QString, int, int, float*, float*)"> 
                    <modify-argument index="2">
                        <replace-type modified-type="PySequence"/>
                    </modify-argument>
                    <modify-argument index="4">
                        <remove-argument/>
                    </modify-argument>
                    <modify-argument index="5">
                        <remove-argument/>
                    </modify-argument>
                    <inject-code class="target" position="beginning">
                        int frames = 0;
                        float *left = nullptr;
                        float *right = nullptr;
                        if ( ! (PySequence_FAST_SIZE(%PYARG_1) == 2) ) {
                            PyErr_SetString(PyExc_TypeError, "error excepted sequence of size two");
                            return 0;
                        }
                        %RETURN_TYPE sample = %CPPSELF.%FUNCTION_NAME(%in1, frames, %in3, left, right);
                    </inject-code>
            </modify-function> -->

            <value-type name="Loops">
                <enum-type name="LoopMode" />
            </value-type>
            <value-type name="Rubberband"></value-type>
        </object-type>

        <object-type name="Instrument">
            <enum-type name="SampleSelectionAlgo"/>
        </object-type>

        <object-type name="InstrumentComponent">
        </object-type>

        <object-type name="InstrumentLayer">
        </object-type>

        <object-type name="InstrumentList">
        </object-type>

        <object-type name="Drumkit">
        </object-type>

        <object-type name="Filesystem">
            <modify-function signature="Filesystem()" remove="all" />
            <enum-type name="file_perms"/>
            <enum-type name="Lookup"/>
        </object-type>

        <object-type name="Song">
            <enum-type name="SongMode"/>
            <enum-type name="ActionMode"/>
        </object-type>

        <object-type name="SongReader">
        </object-type>

        <object-type name="ADSR"></object-type>

        <object-type name="Logger">
            <enum-type name="log_levels"/>>
        </object-type>

        <object-type name="Hydrogen">
            <enum-type name="ErrorMessages"/>
            <enum-type name="GUIState"/>
        </object-type>

        <object-type name="Preferences">
            <enum-type name="UI_LAYOUT_TYPES"/>
            <enum-type name="UI_SCALING_POLICY"/>
            <enum-type name="JackTrackOutputMode"/>
            <enum-type name="JackBBTSyncMethod"/>

        </object-type>

    </namespace-type>
</typesystem>
