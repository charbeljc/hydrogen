#include <QtCore/qbytearray.h> // 
#include <QtCore/qbytearray.h> // QByteArray
#include <QtCore/qbytearray.h> // QByteArrayDataPtr
#include <QtCore/qbytearray.h> // QByteRef
#include <QtCore/qcoreevent.h> // QEvent
#include <QtCore/qflags.h> // QFlags
#include <QtCore/qlist.h> // QList
#include <QtCore/qmetatype.h> // QtMetaTypePrivate::QPairVariantInterfaceImpl
#include <QtCore/qnamespace.h> // Qt::CaseSensitivity
#include <QtCore/qnamespace.h> // Qt::ConnectionType
#include <QtCore/qnamespace.h> // Qt::Initialization
#include <QtCore/qnamespace.h> // Qt::TimerType
#include <QtCore/qobject.h> // QObject
#include <QtCore/qobject.h> // QObjectUserData
#include <QtCore/qobjectdefs.h> // QGenericArgument
#include <QtCore/qobjectdefs.h> // QGenericReturnArgument
#include <QtCore/qobjectdefs.h> // QMetaObject
#include <QtCore/qstring.h> // QString
#include <QtCore/qvariant.h> // QVariant
#include <chrono> // std::chrono::duration
#include <iostream> // --trace
#include <iterator> // std::reverse_iterator
#include <memory> // std::allocator
#include <ratio> // std::ratio
#include <sstream> // __str__
#include <string> // std::basic_string
#include <string> // std::char_traits
#include <qtreset.h>


#include <pybind11/pybind11.h>
#include <functional>
#include <string>
#include <QtCore/qmetaobject.h>
#include <QtCore/qthread.h>
#include <QtCore/qline.h>
#include <QtCore/qmargins.h>
#include <QtCore/qurl.h>
#include <QtCore/qurlquery.h>
#include <QtCore/qbitarray.h>
#include <QtCore/qrect.h>
#include <QtCore/qtextcodec.h>
#include <QtCore/qabstractitemmodel.h>
#include <QtCore/qjsondocument.h>
#include <QtCore/qjsonarray.h>
#include <QtCore/qjsonobject.h>
#include <QtCore/qeasingcurve.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qxmlstream.h>
#include <QtGui/qcolor.h>
#include <QtCore/qabstracteventdispatcher.h>
#include <QtCore/qsocketnotifier.h>
#include <QtCore/qabstractnativeeventfilter.h>
#include <QtCore/qcalendar.h>
#include <QtXml/qdom.h>
#include <QtCore/qmimedata.h>
#include <QtCore/qtimezone.h>
#include <setjmp.h>
#include <core/Logger.h>
#include <custom_qt_casters.h>


#ifndef BINDER_PYBIND11_TYPE_CASTER
	#define BINDER_PYBIND11_TYPE_CASTER
	PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>)
	PYBIND11_DECLARE_HOLDER_TYPE(T, T*)
	PYBIND11_MAKE_OPAQUE(std::shared_ptr<void>)
#endif

void bind_unknown_unknown_8(std::function< pybind11::module &(std::string const &namespace_) > &M)
{
	std::cout << "B523_[QMetaMethod] ";
	{ // QMetaMethod file: line:54
		pybind11::class_<QMetaMethod, std::shared_ptr<QMetaMethod>> cl(M(""), "QMetaMethod", "");
		cl.def( pybind11::init( [](){ return new QMetaMethod(); } ) );
		cl.def( pybind11::init( [](QMetaMethod const &o){ return new QMetaMethod(o); } ) );

		pybind11::enum_<QMetaMethod::Access>(cl, "Access", pybind11::arithmetic(), "")
			.value("Private", QMetaMethod::Private)
			.value("Protected", QMetaMethod::Protected)
			.value("Public", QMetaMethod::Public)
			.export_values();


		pybind11::enum_<QMetaMethod::MethodType>(cl, "MethodType", pybind11::arithmetic(), "")
			.value("Method", QMetaMethod::Method)
			.value("Signal", QMetaMethod::Signal)
			.value("Slot", QMetaMethod::Slot)
			.value("Constructor", QMetaMethod::Constructor)
			.export_values();


		pybind11::enum_<QMetaMethod::Attributes>(cl, "Attributes", pybind11::arithmetic(), "")
			.value("Compatibility", QMetaMethod::Compatibility)
			.value("Cloned", QMetaMethod::Cloned)
			.value("Scriptable", QMetaMethod::Scriptable)
			.export_values();

		cl.def("typeName", (const char * (QMetaMethod::*)() const) &QMetaMethod::typeName, "C++: QMetaMethod::typeName() const --> const char *", pybind11::return_value_policy::automatic);
		cl.def("returnType", (int (QMetaMethod::*)() const) &QMetaMethod::returnType, "C++: QMetaMethod::returnType() const --> int");
		cl.def("parameterCount", (int (QMetaMethod::*)() const) &QMetaMethod::parameterCount, "C++: QMetaMethod::parameterCount() const --> int");
		cl.def("parameterType", (int (QMetaMethod::*)(int) const) &QMetaMethod::parameterType, "C++: QMetaMethod::parameterType(int) const --> int", pybind11::arg("index"));
		cl.def("getParameterTypes", (void (QMetaMethod::*)(int *) const) &QMetaMethod::getParameterTypes, "C++: QMetaMethod::getParameterTypes(int *) const --> void", pybind11::arg("types"));
		cl.def("tag", (const char * (QMetaMethod::*)() const) &QMetaMethod::tag, "C++: QMetaMethod::tag() const --> const char *", pybind11::return_value_policy::automatic);
		cl.def("access", (enum QMetaMethod::Access (QMetaMethod::*)() const) &QMetaMethod::access, "C++: QMetaMethod::access() const --> enum QMetaMethod::Access");
		cl.def("methodType", (enum QMetaMethod::MethodType (QMetaMethod::*)() const) &QMetaMethod::methodType, "C++: QMetaMethod::methodType() const --> enum QMetaMethod::MethodType");
		cl.def("attributes", (int (QMetaMethod::*)() const) &QMetaMethod::attributes, "C++: QMetaMethod::attributes() const --> int");
		cl.def("methodIndex", (int (QMetaMethod::*)() const) &QMetaMethod::methodIndex, "C++: QMetaMethod::methodIndex() const --> int");
		cl.def("revision", (int (QMetaMethod::*)() const) &QMetaMethod::revision, "C++: QMetaMethod::revision() const --> int");
		cl.def("enclosingMetaObject", (const struct QMetaObject * (QMetaMethod::*)() const) &QMetaMethod::enclosingMetaObject, "C++: QMetaMethod::enclosingMetaObject() const --> const struct QMetaObject *", pybind11::return_value_policy::automatic);
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, enum Qt::ConnectionType const & a1, class QGenericReturnArgument const & a2) -> bool { return o.invoke(a0, a1, a2); }, "", pybind11::arg("object"), pybind11::arg("connectionType"), pybind11::arg("returnValue"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, enum Qt::ConnectionType const & a1, class QGenericReturnArgument const & a2, class QGenericArgument const & a3) -> bool { return o.invoke(a0, a1, a2, a3); }, "", pybind11::arg("object"), pybind11::arg("connectionType"), pybind11::arg("returnValue"), pybind11::arg("val0"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, enum Qt::ConnectionType const & a1, class QGenericReturnArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4) -> bool { return o.invoke(a0, a1, a2, a3, a4); }, "", pybind11::arg("object"), pybind11::arg("connectionType"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, enum Qt::ConnectionType const & a1, class QGenericReturnArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5); }, "", pybind11::arg("object"), pybind11::arg("connectionType"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, enum Qt::ConnectionType const & a1, class QGenericReturnArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5, a6); }, "", pybind11::arg("object"), pybind11::arg("connectionType"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, enum Qt::ConnectionType const & a1, class QGenericReturnArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5, a6, a7); }, "", pybind11::arg("object"), pybind11::arg("connectionType"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, enum Qt::ConnectionType const & a1, class QGenericReturnArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7, class QGenericArgument const & a8) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5, a6, a7, a8); }, "", pybind11::arg("object"), pybind11::arg("connectionType"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, enum Qt::ConnectionType const & a1, class QGenericReturnArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7, class QGenericArgument const & a8, class QGenericArgument const & a9) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); }, "", pybind11::arg("object"), pybind11::arg("connectionType"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, enum Qt::ConnectionType const & a1, class QGenericReturnArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7, class QGenericArgument const & a8, class QGenericArgument const & a9, class QGenericArgument const & a10) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); }, "", pybind11::arg("object"), pybind11::arg("connectionType"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"), pybind11::arg("val7"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, enum Qt::ConnectionType const & a1, class QGenericReturnArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7, class QGenericArgument const & a8, class QGenericArgument const & a9, class QGenericArgument const & a10, class QGenericArgument const & a11) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); }, "", pybind11::arg("object"), pybind11::arg("connectionType"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"), pybind11::arg("val7"), pybind11::arg("val8"));
		cl.def("invoke", (bool (QMetaMethod::*)(class QObject *, enum Qt::ConnectionType, class QGenericReturnArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument) const) &QMetaMethod::invoke, "C++: QMetaMethod::invoke(class QObject *, enum Qt::ConnectionType, class QGenericReturnArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument) const --> bool", pybind11::arg("object"), pybind11::arg("connectionType"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"), pybind11::arg("val7"), pybind11::arg("val8"), pybind11::arg("val9"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, class QGenericReturnArgument const & a1) -> bool { return o.invoke(a0, a1); }, "", pybind11::arg("object"), pybind11::arg("returnValue"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, class QGenericReturnArgument const & a1, class QGenericArgument const & a2) -> bool { return o.invoke(a0, a1, a2); }, "", pybind11::arg("object"), pybind11::arg("returnValue"), pybind11::arg("val0"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, class QGenericReturnArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3) -> bool { return o.invoke(a0, a1, a2, a3); }, "", pybind11::arg("object"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, class QGenericReturnArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4) -> bool { return o.invoke(a0, a1, a2, a3, a4); }, "", pybind11::arg("object"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, class QGenericReturnArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5); }, "", pybind11::arg("object"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, class QGenericReturnArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5, a6); }, "", pybind11::arg("object"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, class QGenericReturnArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5, a6, a7); }, "", pybind11::arg("object"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, class QGenericReturnArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7, class QGenericArgument const & a8) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5, a6, a7, a8); }, "", pybind11::arg("object"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, class QGenericReturnArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7, class QGenericArgument const & a8, class QGenericArgument const & a9) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); }, "", pybind11::arg("object"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"), pybind11::arg("val7"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, class QGenericReturnArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7, class QGenericArgument const & a8, class QGenericArgument const & a9, class QGenericArgument const & a10) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); }, "", pybind11::arg("object"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"), pybind11::arg("val7"), pybind11::arg("val8"));
		cl.def("invoke", (bool (QMetaMethod::*)(class QObject *, class QGenericReturnArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument) const) &QMetaMethod::invoke, "C++: QMetaMethod::invoke(class QObject *, class QGenericReturnArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument) const --> bool", pybind11::arg("object"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"), pybind11::arg("val7"), pybind11::arg("val8"), pybind11::arg("val9"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, enum Qt::ConnectionType const & a1) -> bool { return o.invoke(a0, a1); }, "", pybind11::arg("object"), pybind11::arg("connectionType"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, enum Qt::ConnectionType const & a1, class QGenericArgument const & a2) -> bool { return o.invoke(a0, a1, a2); }, "", pybind11::arg("object"), pybind11::arg("connectionType"), pybind11::arg("val0"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, enum Qt::ConnectionType const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3) -> bool { return o.invoke(a0, a1, a2, a3); }, "", pybind11::arg("object"), pybind11::arg("connectionType"), pybind11::arg("val0"), pybind11::arg("val1"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, enum Qt::ConnectionType const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4) -> bool { return o.invoke(a0, a1, a2, a3, a4); }, "", pybind11::arg("object"), pybind11::arg("connectionType"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, enum Qt::ConnectionType const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5); }, "", pybind11::arg("object"), pybind11::arg("connectionType"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, enum Qt::ConnectionType const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5, a6); }, "", pybind11::arg("object"), pybind11::arg("connectionType"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, enum Qt::ConnectionType const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5, a6, a7); }, "", pybind11::arg("object"), pybind11::arg("connectionType"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, enum Qt::ConnectionType const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7, class QGenericArgument const & a8) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5, a6, a7, a8); }, "", pybind11::arg("object"), pybind11::arg("connectionType"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, enum Qt::ConnectionType const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7, class QGenericArgument const & a8, class QGenericArgument const & a9) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); }, "", pybind11::arg("object"), pybind11::arg("connectionType"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"), pybind11::arg("val7"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, enum Qt::ConnectionType const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7, class QGenericArgument const & a8, class QGenericArgument const & a9, class QGenericArgument const & a10) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); }, "", pybind11::arg("object"), pybind11::arg("connectionType"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"), pybind11::arg("val7"), pybind11::arg("val8"));
		cl.def("invoke", (bool (QMetaMethod::*)(class QObject *, enum Qt::ConnectionType, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument) const) &QMetaMethod::invoke, "C++: QMetaMethod::invoke(class QObject *, enum Qt::ConnectionType, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument) const --> bool", pybind11::arg("object"), pybind11::arg("connectionType"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"), pybind11::arg("val7"), pybind11::arg("val8"), pybind11::arg("val9"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0) -> bool { return o.invoke(a0); }, "", pybind11::arg("object"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, class QGenericArgument const & a1) -> bool { return o.invoke(a0, a1); }, "", pybind11::arg("object"), pybind11::arg("val0"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, class QGenericArgument const & a1, class QGenericArgument const & a2) -> bool { return o.invoke(a0, a1, a2); }, "", pybind11::arg("object"), pybind11::arg("val0"), pybind11::arg("val1"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, class QGenericArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3) -> bool { return o.invoke(a0, a1, a2, a3); }, "", pybind11::arg("object"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, class QGenericArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4) -> bool { return o.invoke(a0, a1, a2, a3, a4); }, "", pybind11::arg("object"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, class QGenericArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5); }, "", pybind11::arg("object"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, class QGenericArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5, a6); }, "", pybind11::arg("object"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, class QGenericArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5, a6, a7); }, "", pybind11::arg("object"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, class QGenericArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7, class QGenericArgument const & a8) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5, a6, a7, a8); }, "", pybind11::arg("object"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"), pybind11::arg("val7"));
		cl.def("invoke", [](QMetaMethod const &o, class QObject * a0, class QGenericArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7, class QGenericArgument const & a8, class QGenericArgument const & a9) -> bool { return o.invoke(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); }, "", pybind11::arg("object"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"), pybind11::arg("val7"), pybind11::arg("val8"));
		cl.def("invoke", (bool (QMetaMethod::*)(class QObject *, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument) const) &QMetaMethod::invoke, "C++: QMetaMethod::invoke(class QObject *, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument) const --> bool", pybind11::arg("object"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"), pybind11::arg("val7"), pybind11::arg("val8"), pybind11::arg("val9"));
		cl.def("invokeOnGadget", [](QMetaMethod const &o, void * a0, class QGenericReturnArgument const & a1) -> bool { return o.invokeOnGadget(a0, a1); }, "", pybind11::arg("gadget"), pybind11::arg("returnValue"));
		cl.def("invokeOnGadget", [](QMetaMethod const &o, void * a0, class QGenericReturnArgument const & a1, class QGenericArgument const & a2) -> bool { return o.invokeOnGadget(a0, a1, a2); }, "", pybind11::arg("gadget"), pybind11::arg("returnValue"), pybind11::arg("val0"));
		cl.def("invokeOnGadget", [](QMetaMethod const &o, void * a0, class QGenericReturnArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3) -> bool { return o.invokeOnGadget(a0, a1, a2, a3); }, "", pybind11::arg("gadget"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"));
		cl.def("invokeOnGadget", [](QMetaMethod const &o, void * a0, class QGenericReturnArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4) -> bool { return o.invokeOnGadget(a0, a1, a2, a3, a4); }, "", pybind11::arg("gadget"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"));
		cl.def("invokeOnGadget", [](QMetaMethod const &o, void * a0, class QGenericReturnArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5) -> bool { return o.invokeOnGadget(a0, a1, a2, a3, a4, a5); }, "", pybind11::arg("gadget"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"));
		cl.def("invokeOnGadget", [](QMetaMethod const &o, void * a0, class QGenericReturnArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6) -> bool { return o.invokeOnGadget(a0, a1, a2, a3, a4, a5, a6); }, "", pybind11::arg("gadget"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"));
		cl.def("invokeOnGadget", [](QMetaMethod const &o, void * a0, class QGenericReturnArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7) -> bool { return o.invokeOnGadget(a0, a1, a2, a3, a4, a5, a6, a7); }, "", pybind11::arg("gadget"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"));
		cl.def("invokeOnGadget", [](QMetaMethod const &o, void * a0, class QGenericReturnArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7, class QGenericArgument const & a8) -> bool { return o.invokeOnGadget(a0, a1, a2, a3, a4, a5, a6, a7, a8); }, "", pybind11::arg("gadget"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"));
		cl.def("invokeOnGadget", [](QMetaMethod const &o, void * a0, class QGenericReturnArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7, class QGenericArgument const & a8, class QGenericArgument const & a9) -> bool { return o.invokeOnGadget(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); }, "", pybind11::arg("gadget"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"), pybind11::arg("val7"));
		cl.def("invokeOnGadget", [](QMetaMethod const &o, void * a0, class QGenericReturnArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7, class QGenericArgument const & a8, class QGenericArgument const & a9, class QGenericArgument const & a10) -> bool { return o.invokeOnGadget(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); }, "", pybind11::arg("gadget"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"), pybind11::arg("val7"), pybind11::arg("val8"));
		cl.def("invokeOnGadget", (bool (QMetaMethod::*)(void *, class QGenericReturnArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument) const) &QMetaMethod::invokeOnGadget, "C++: QMetaMethod::invokeOnGadget(void *, class QGenericReturnArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument) const --> bool", pybind11::arg("gadget"), pybind11::arg("returnValue"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"), pybind11::arg("val7"), pybind11::arg("val8"), pybind11::arg("val9"));
		cl.def("invokeOnGadget", [](QMetaMethod const &o, void * a0) -> bool { return o.invokeOnGadget(a0); }, "", pybind11::arg("gadget"));
		cl.def("invokeOnGadget", [](QMetaMethod const &o, void * a0, class QGenericArgument const & a1) -> bool { return o.invokeOnGadget(a0, a1); }, "", pybind11::arg("gadget"), pybind11::arg("val0"));
		cl.def("invokeOnGadget", [](QMetaMethod const &o, void * a0, class QGenericArgument const & a1, class QGenericArgument const & a2) -> bool { return o.invokeOnGadget(a0, a1, a2); }, "", pybind11::arg("gadget"), pybind11::arg("val0"), pybind11::arg("val1"));
		cl.def("invokeOnGadget", [](QMetaMethod const &o, void * a0, class QGenericArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3) -> bool { return o.invokeOnGadget(a0, a1, a2, a3); }, "", pybind11::arg("gadget"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"));
		cl.def("invokeOnGadget", [](QMetaMethod const &o, void * a0, class QGenericArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4) -> bool { return o.invokeOnGadget(a0, a1, a2, a3, a4); }, "", pybind11::arg("gadget"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"));
		cl.def("invokeOnGadget", [](QMetaMethod const &o, void * a0, class QGenericArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5) -> bool { return o.invokeOnGadget(a0, a1, a2, a3, a4, a5); }, "", pybind11::arg("gadget"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"));
		cl.def("invokeOnGadget", [](QMetaMethod const &o, void * a0, class QGenericArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6) -> bool { return o.invokeOnGadget(a0, a1, a2, a3, a4, a5, a6); }, "", pybind11::arg("gadget"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"));
		cl.def("invokeOnGadget", [](QMetaMethod const &o, void * a0, class QGenericArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7) -> bool { return o.invokeOnGadget(a0, a1, a2, a3, a4, a5, a6, a7); }, "", pybind11::arg("gadget"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"));
		cl.def("invokeOnGadget", [](QMetaMethod const &o, void * a0, class QGenericArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7, class QGenericArgument const & a8) -> bool { return o.invokeOnGadget(a0, a1, a2, a3, a4, a5, a6, a7, a8); }, "", pybind11::arg("gadget"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"), pybind11::arg("val7"));
		cl.def("invokeOnGadget", [](QMetaMethod const &o, void * a0, class QGenericArgument const & a1, class QGenericArgument const & a2, class QGenericArgument const & a3, class QGenericArgument const & a4, class QGenericArgument const & a5, class QGenericArgument const & a6, class QGenericArgument const & a7, class QGenericArgument const & a8, class QGenericArgument const & a9) -> bool { return o.invokeOnGadget(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); }, "", pybind11::arg("gadget"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"), pybind11::arg("val7"), pybind11::arg("val8"));
		cl.def("invokeOnGadget", (bool (QMetaMethod::*)(void *, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument) const) &QMetaMethod::invokeOnGadget, "C++: QMetaMethod::invokeOnGadget(void *, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument, class QGenericArgument) const --> bool", pybind11::arg("gadget"), pybind11::arg("val0"), pybind11::arg("val1"), pybind11::arg("val2"), pybind11::arg("val3"), pybind11::arg("val4"), pybind11::arg("val5"), pybind11::arg("val6"), pybind11::arg("val7"), pybind11::arg("val8"), pybind11::arg("val9"));
		cl.def("isValid", (bool (QMetaMethod::*)() const) &QMetaMethod::isValid, "C++: QMetaMethod::isValid() const --> bool");
	}
}
